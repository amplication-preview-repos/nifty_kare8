/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LedgerEntry } from "./LedgerEntry";
import { LedgerEntryCountArgs } from "./LedgerEntryCountArgs";
import { LedgerEntryFindManyArgs } from "./LedgerEntryFindManyArgs";
import { LedgerEntryFindUniqueArgs } from "./LedgerEntryFindUniqueArgs";
import { CreateLedgerEntryArgs } from "./CreateLedgerEntryArgs";
import { UpdateLedgerEntryArgs } from "./UpdateLedgerEntryArgs";
import { DeleteLedgerEntryArgs } from "./DeleteLedgerEntryArgs";
import { WalletFindManyArgs } from "../../wallet/base/WalletFindManyArgs";
import { Wallet } from "../../wallet/base/Wallet";
import { Transaction } from "../../transaction/base/Transaction";
import { LedgerEntryService } from "../ledgerEntry.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LedgerEntry)
export class LedgerEntryResolverBase {
  constructor(
    protected readonly service: LedgerEntryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LedgerEntry",
    action: "read",
    possession: "any",
  })
  async _ledgerEntriesMeta(
    @graphql.Args() args: LedgerEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LedgerEntry])
  @nestAccessControl.UseRoles({
    resource: "LedgerEntry",
    action: "read",
    possession: "any",
  })
  async ledgerEntries(
    @graphql.Args() args: LedgerEntryFindManyArgs
  ): Promise<LedgerEntry[]> {
    return this.service.ledgerEntries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LedgerEntry, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LedgerEntry",
    action: "read",
    possession: "own",
  })
  async ledgerEntry(
    @graphql.Args() args: LedgerEntryFindUniqueArgs
  ): Promise<LedgerEntry | null> {
    const result = await this.service.ledgerEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LedgerEntry)
  @nestAccessControl.UseRoles({
    resource: "LedgerEntry",
    action: "create",
    possession: "any",
  })
  async createLedgerEntry(
    @graphql.Args() args: CreateLedgerEntryArgs
  ): Promise<LedgerEntry> {
    return await this.service.createLedgerEntry({
      ...args,
      data: {
        ...args.data,

        transaction: args.data.transaction
          ? {
              connect: args.data.transaction,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LedgerEntry)
  @nestAccessControl.UseRoles({
    resource: "LedgerEntry",
    action: "update",
    possession: "any",
  })
  async updateLedgerEntry(
    @graphql.Args() args: UpdateLedgerEntryArgs
  ): Promise<LedgerEntry | null> {
    try {
      return await this.service.updateLedgerEntry({
        ...args,
        data: {
          ...args.data,

          transaction: args.data.transaction
            ? {
                connect: args.data.transaction,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LedgerEntry)
  @nestAccessControl.UseRoles({
    resource: "LedgerEntry",
    action: "delete",
    possession: "any",
  })
  async deleteLedgerEntry(
    @graphql.Args() args: DeleteLedgerEntryArgs
  ): Promise<LedgerEntry | null> {
    try {
      return await this.service.deleteLedgerEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Wallet], { name: "wallets" })
  @nestAccessControl.UseRoles({
    resource: "Wallet",
    action: "read",
    possession: "any",
  })
  async findWallets(
    @graphql.Parent() parent: LedgerEntry,
    @graphql.Args() args: WalletFindManyArgs
  ): Promise<Wallet[]> {
    const results = await this.service.findWallets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Transaction, {
    nullable: true,
    name: "transaction",
  })
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async getTransaction(
    @graphql.Parent() parent: LedgerEntry
  ): Promise<Transaction | null> {
    const result = await this.service.getTransaction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
