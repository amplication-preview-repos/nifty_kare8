/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LedgerEntry as PrismaLedgerEntry,
  Wallet as PrismaWallet,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class LedgerEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LedgerEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ledgerEntry.count(args);
  }

  async ledgerEntries(
    args: Prisma.LedgerEntryFindManyArgs
  ): Promise<PrismaLedgerEntry[]> {
    return this.prisma.ledgerEntry.findMany(args);
  }
  async ledgerEntry(
    args: Prisma.LedgerEntryFindUniqueArgs
  ): Promise<PrismaLedgerEntry | null> {
    return this.prisma.ledgerEntry.findUnique(args);
  }
  async createLedgerEntry(
    args: Prisma.LedgerEntryCreateArgs
  ): Promise<PrismaLedgerEntry> {
    return this.prisma.ledgerEntry.create(args);
  }
  async updateLedgerEntry(
    args: Prisma.LedgerEntryUpdateArgs
  ): Promise<PrismaLedgerEntry> {
    return this.prisma.ledgerEntry.update(args);
  }
  async deleteLedgerEntry(
    args: Prisma.LedgerEntryDeleteArgs
  ): Promise<PrismaLedgerEntry> {
    return this.prisma.ledgerEntry.delete(args);
  }

  async findWallets(
    parentId: string,
    args: Prisma.WalletFindManyArgs
  ): Promise<PrismaWallet[]> {
    return this.prisma.ledgerEntry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wallets(args);
  }

  async getTransaction(parentId: string): Promise<PrismaTransaction | null> {
    return this.prisma.ledgerEntry
      .findUnique({
        where: { id: parentId },
      })
      .transaction();
  }
}
